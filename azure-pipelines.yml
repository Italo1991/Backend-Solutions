# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

variables:
  buildConfiguration: 'Release'
  imageName: 'pipelines-italo-customer-docker'
  containerRegistry: 'DockerHub-Italo'
  imageRepository: 'italoduarte1991/italo-customer-api'

parameters:
- name: vmImage
  displayName: Pool Image
  type: string
  default: ubuntu-latest
  values:
  - windows-latest
  - ubuntu-latest
- name: runTests
  displayName: Run Tests
  type: boolean
  default: true

stages:
- stage: BuildStage
  displayName: Build
  jobs:
  - job: UnitTestingJob
    displayName: Unit Testing
    continueOnError: false
    timeoutInMinutes: 3
    steps:
    - ${{ if eq(parameters.runTests, true) }}:
      - task: DotNetCoreCLI@2
        displayName: 'Unit test'
        inputs:
          command: 'test'
          projects: '**/*Tests/*.csproj'
          arguments: '--configuration $(buildConfiguration) --logger "\trx;LogFileName=TestOutputResults.xml"\'
      - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'XUnit'
          testResultsFiles: '**/Test*.xml'
      
  - job: BuildAndPublishJob
    dependsOn: UnitTestingJob
    displayName: Build and Publish Docker Image
    continueOnError: false
    timeoutInMinutes: 3
    pool:
      vmImage: ${{ parameters.vmImage }}
    steps:

    - script: echo building $(Build.BuildNumber) with ${{ parameters.vmImage }}
      displayName: 'Pool vm-image'

    - task: Docker@2
      name: build
      condition: succeeded()
      displayName: Build Docker Image
      inputs:
        containerRegistry: '$(containerRegistry)'
        repository: '$(imageRepository)'
        command: 'build'
        Dockerfile: 'Dockerfile'
        tags: 'latest'
      
    - task: Docker@2
      name: push
      condition: succeeded()
      displayName: Push Docker Image
      inputs:
        containerRegistry: '$(containerRegistry)'
        repository: '$(imageRepository)'
        command: 'push'
        tags: 'latest'

- stage: "DeployDevStage"
  displayName: "Deploy on Dev"
  dependsOn: BuildStage
  jobs:
    - job: TesteDev
      displayName: Deploy on DEV
      steps:
      - script: echo teste dsv

- stage: "DeployHMLStage"
  displayName: "Deploy on HML"
  dependsOn: DeployDevStage
  jobs:
    - job: TesteHml
      displayName: Deploy on HML
      steps:
      - script: echo teste hml

- stage: "DeployPRDStage"
  displayName: "Deploy on PRD"
  dependsOn: DeployHMLStage
  jobs:
    - job: TestePrd
      displayName: Deploy on PRD
      steps:
      - script: echo teste prd